process egammaDigiToClusters = {
   service = MessageLogger
   {
      untracked vstring destinations = {"cerr", "cout"}
      PSet cerr                      = { string threshold = "WARNING" }
      PSet cout                      = { string threshold = "INFO"    }

      untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
      vstring categories = { "FwkJob" }

      PSet FrameworkJobReport.xml = {
                                PSet default = { int32 limit = 0 }
                                PSet FwkJob = { int32 limit = 10000000 }
                                    }

   }

 #######################################################################################
 # input
  source = PoolSource {
     untracked vstring fileNames = {'file:/afs/cern.ch/cms/data/CMSSW/Tutorials/May06CPTweekTutorials/EcalReconstruction/e_pt35_detsim_digi.root'}
     untracked int32 maxEvents = -1
     untracked uint32 debugVebosity = 10
     untracked bool   debugFlag     = true
  }
 #######################################################################################

 ###################################################################
 # Get hardcoded conditions the same used for standard digitization
  es_source = EcalTrivialConditionRetriever {
      untracked double adcToGeVEBConstant = 0.037
  }
 ###################################################################


 #######################################################################################	
 # EB+EE uncalibrated RecHit producer 
 # Weight method (CMS standard requires tuned weights) 	
 include "RecoLocalCalo/EcalRecProducers/data/EcalWeightUncalibratedRecHitProducer.cfi"	
 # Analytic fit (much slower does not require weights) 	
 # include "RecoLocalCalo/EcalRecProducers/data/EcalAnalFitUncalibratedRecHitProducer.cfi"	
 #######################################################################################

 #######################################################################################
 # EB+EE RecHit producer (from uncalibrated RecHit)
 include "RecoLocalCalo/EcalRecProducers/data/EcalRecHitProducer.cfi"	
 #######################################################################################

  # for the geometry:
  es_source = XMLIdealGeometryESSource 
  {
    FileInPath GeometryConfiguration = "SimG4CMS/Calo/test/data/testConfiguration.xml"
    string rootNodeName = ""
  }
  es_module = EcalBarrelGeometryEP {}
  es_module = EcalEndcapGeometryEP {}
  es_module = HcalHardcodeGeometryEP {}  
  es_module = CaloTowerHardcodeGeometryEP {}  
  es_module = CaloGeometryBuilder {}


  #------------------
  #Island clustering:
  #------------------

  # Island BasicCluster producer
  module islandBasicClusterProducer = IslandClusterProducer
  {
    string hitCollection = "EcalRecHitsEB"
    string hitProducer = "ecalrechit"
    string clusterCollection = "islandBasicClusterCollection"
    double IslandBarrelSeedThr = .5
    double IslandEndcapSeedThr = .18
  }

  # Island SuperCluster producer
  module islandSuperClusterProducer = SuperClusterProducer
  {
    string superclusterCollection = "islandSuperClusterCollection"
  }

  # Energy scale correction for Island SuperClusters
  module correctedIslandSuperClusterProducer = EgammaSCCorrectionMaker
  {
    string recHitProducer = "ecalrechit"
    string recHitCollection = "EcalRecHitsEB"
    string rawSuperClusterProducer = "islandSuperClusterProducer"
    string rawSuperClusterCollection = "islandSuperClusterCollection"
    string superClusterAlgo = "Island"
    double sigmaElectronicNoise = 0.03
                                                                                                                             
    bool applyEnergyCorrection = true
    string corectedSuperClusterCollection = "correctedIslandSuperClusterCollection"
  }

  sequence islandSequence = { islandBasicClusterProducer&islandSuperClusterProducer&correctedIslandSuperClusterProducer }


  #------------------
  #Hybrid clustering:
  #------------------

  # Producer for Hybrid BasicClusters and SuperClusters
  module hybridSuperClusterProducer = HybridClusterProducer
  {
    double HybridBarrelSeedThr = 1.0
    double HybridEndcapSeedThr = 1.0
    int32 step = 17
    double ethresh = .1
    double ewing = 1.0
    double eseed = .35

    string basicclusterCollection = "HybridBasicClusterCollection"
    string superclusterCollection = "HybridSuperClusterCollection"
    string ecalhitproducer = "ecalrechit"
    string ecalhitcollection = "EcalRecHitsEB"
  }

  # Energy scale correction for Hybrid SuperClusters
  module correctedHybridSuperClusterProducer = EgammaSCCorrectionMaker
  {
    string recHitProducer = "ecalrechit"
    string recHitCollection = "EcalRecHitsEB"
    string rawSuperClusterProducer = "hybridSuperClusterProducer"
    string rawSuperClusterCollection = "HybridSuperClusterCollection"
    string superClusterAlgo = "Hybrid"
    double sigmaElectronicNoise = 0.03
                                                                                                                             
    bool applyEnergyCorrection = true
    string corectedSuperClusterCollection = "correctedHybridSuperClusterCollection"
  }

  sequence hybridSequence = { hybridSuperClusterProducer&correctedHybridSuperClusterProducer }

  path p = { ecaluncalibrechit , ecalrechit, islandSequence, hybridSequence }

  module o2 = PoolOutputModule 
  { 
     untracked string fileName = "e_pt35_reco.root" 
     untracked vstring outputCommands = 
     {
       "drop *",
       "keep edmHepMCProduct_*_*_*",
       "keep recoBasicClusters_*_*_*",
       "keep recoSuperClusters_*_*_*"
     }
  }
 
  endpath outpath = { o2 }
}
