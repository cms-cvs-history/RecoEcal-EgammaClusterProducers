
#
#  run on collection of ecal rechits to make super clusters and store them
#  in the output collection
#
# authors A. Kyriakis NCSR "Demokritos" Athens
#         D. Maletic Vinca "Belgrate"
#
process PiZeroDiscriminatorProcess = 
{

  # initialize  MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"

  untracked PSet maxEvents = {untracked int32 input = -1}

  # input module. assume root file contains EcalRecHits
  source = PoolSource 
  {
    # Number of events program should run
#
    untracked vstring fileNames = {
      'rfio:/castor/cern.ch/user/a/akyriaki/SingleParticle/CMSSW150pre5/Photon/pt60/Photon_pt_60_1.root'
    }
  }


  # geometry needed for clustering
  include "RecoEcal/EgammaClusterProducers/data/geometryForClustering.cff"


  # pi0 discrimination variables
  include "RecoEcal/EgammaClusterProducers/data/piZeroDiscriminators.cfi"


  # create path with all clustering algos
  path p = { piZeroDiscriminators  }


  # output module so store ony (super)clusters and MC truth
  module o2 = PoolOutputModule
  {
     untracked string fileName = "/tmp/akyriaki/Photon_pt_60_1_SEEndcap_NNout_new.root"
     untracked vstring outputCommands =
     {
       "drop *",
       "keep *_g4SimHits_*_*",
       "keep SimTracks_*_*_*",
       "keep SimVertexs_*_*_*",
       "keep CaloTowersSorted_*_*_*",
       "keep edmHepMCProduct_*_*_*",
       "keep recoBasicClusters_*_*_*",
       "keep recoCaloJets_*_*_*",
       "keep recoCaloMETs_*_*_*",
       "keep recoClusterShapes_*_*_*",
       "keep recoClusterPi0Discriminators_*_*_*",
       "keep recoConvertedPhotons_*_*_*",
       "keep recoElectrons_*_*_*",
       "keep recoGenJets_*_*_*",
       "keep recoGenMETs_*_*_*",
       "keep recoGsfTracks_*_*_*",
       "keep recoIsolatedTauTagInfos_*_*_*",
       "keep recoJetTags_*_*_*",
       "keep recoMuons_*_*_*",
       "keep recoPhotons_*_*_*",
       "keep recoPixelMatchGsfElectrons_*_*_*",
       "keep recoPreshowerClusters_*_*_*",
       "keep recoSiStripElectrons_*_*_*",
       "keep recoSoftLeptonTagInfos_*_*_*",
       "keep recoSuperClusters_*_*_*",
       "keep recoTrackCountingTagInfos_*_*_*",
       "keep recoTrackExtras_*_*_*",
       "keep recoTracks_*_*_*",
       "keep recoVertexs_*_*_*",
       "keep recoTracks_ckfOutInTracksFromConversionsBarrel_*_*",
       "keep recoTracks_ckfInOutTracksFromConversionsBarrel_*_*",
       "keep recoTracks_ckfOutInTracksFromConversionsEndcap_*_*",
       "keep recoTracks_ckfInOutTracksFromConversionsEndcap_*_*",
       "keep recoTrackExtras_ckfOutInTracksFromConversionsBarrel_*_*",
       "keep recoTrackExtras_ckfInOutTracksFromConversionsBarrel_*_*",
       "keep recoTrackExtras_ckfOutInTracksFromConversionsEndcap_*_*",
       "keep recoTrackExtras_ckfInOutTracksFromConversionsEndcap_*_*"
     }
  }

  # print event number
  module counter = AsciiOutputModule {}

  endpath outpath = { counter, o2 }
}
